From rreale@iol.it Mon Jul 15 06:21:42 2002
Received: from ppp-80-63.26-151.libero.it ([151.26.63.80] helo=localhost.localdomain)
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17U2z6-0007j6-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 06:21:42 -0400
Received: from rreale by localhost.localdomain with local (Exim 3.12 #1 (Debian))
	id 17U2zL-0000gh-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 12:21:55 +0200
Date: Mon, 15 Jul 2002 12:21:55 +0200
To: bug-hurd@gnu.org
Subject: Message passing in user-land
Message-ID: <20020715122155.A2600@mail.eq.cr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
From: rreale@iol.it
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

Hi,

I'm a beginning GNU user and a second-rate programmer, yet
I'm attracted by the Free Software philosophy and even more by
OS design.  Indeed, I've a small question about the Hurd:

Why we can't implement message passing entirely in user-space rather
than in the kernel?

Roberto


From Marcus.Brinkmann@ruhr-uni-bochum.de Mon Jul 15 07:13:37 2002
Received: from porta.u64.de ([194.77.88.106])
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17U3nM-0001DF-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 07:13:36 -0400
Received: from (localhost) [212.23.136.22] 
	by porta.u64.de with asmtp (Exim 3.12 #1 (Debian))
	id 17U4XV-0007qu-00; Mon, 15 Jul 2002 14:01:17 +0200
Received: from marcus by localhost with local (Exim 3.35 #1 (Debian))
	id 17U3nH-0000H6-00; Mon, 15 Jul 2002 13:13:31 +0200
Date: Mon, 15 Jul 2002 13:13:30 +0200
From: Marcus Brinkmann <Marcus.Brinkmann@ruhr-uni-bochum.de>
To: rreale@iol.it
Cc: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
Message-ID: <20020715111330.GD432@212.23.136.22>
References: <20020715122155.A2600@mail.eq.cr>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20020715122155.A2600@mail.eq.cr>
User-Agent: Mutt/1.4i
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

On Mon, Jul 15, 2002 at 12:21:55PM +0200, rreale@iol.it wrote:
> Why we can't implement message passing entirely in user-space rather
> than in the kernel?

Imagine you remove all IPC from the kernel.  How do you send a user-space
message to another process?  You can't.

That said, there is a lot of things in GNU Mach that can be in user space.
Mach is a microkernel of the first generation.  Try to take a look at L4,
which is a modern microkernel that is extremely minimal.

Thanks,
Marcus

-- 
`Rhubarb is no Egyptian god.' GNU      http://www.gnu.org    marcus@gnu.org
Marcus Brinkmann              The Hurd http://www.gnu.org/software/hurd/
Marcus.Brinkmann@ruhr-uni-bochum.de
http://www.marcus-brinkmann.de/


From rreale@iol.it Mon Jul 15 10:38:15 2002
Received: from ppp-121-67.26-151.libero.it ([151.26.67.121] helo=localhost.localdomain)
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17U6zP-0000lf-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 10:38:15 -0400
Received: from rreale by localhost.localdomain with local (Exim 3.12 #1 (Debian))
	id 17U6zV-0001QD-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 16:38:21 +0200
Date: Mon, 15 Jul 2002 16:38:21 +0200
To: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
Message-ID: <20020715163821.A5411@mail.eq.cr>
References: <20020715122155.A2600@mail.eq.cr> <20020715111330.GD432@212.23.136.22>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <20020715111330.GD432@212.23.136.22>; from Marcus.Brinkmann@ruhr-uni-bochum.de on Mon, Jul 15, 2002 at 01:13:30PM +0200
From: rreale@iol.it
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

On Mon, Jul 15, 2002 at 01:13:30PM +0200, Marcus Brinkmann wrote:
> On Mon, Jul 15, 2002 at 12:21:55PM +0200, rreale@iol.it wrote:
> > Why we can't implement message passing entirely in user-space rather
> > than in the kernel?
> 
> Imagine you remove all IPC from the kernel.  How do you send a user-space
> message to another process?  You can't.
 
But isn't it possible to build a sort of mechanism based on shared memory,
thus avoiding the passage across the kernel?

Roberto


From rocketmail_com@rocketmail.com Mon Jul 15 11:04:00 2002
Received: from web14601.mail.yahoo.com ([216.136.224.79])
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17U7OK-00021G-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 11:04:00 -0400
Message-ID: <20020715150355.85923.qmail@web14601.mail.yahoo.com>
Received: from [129.97.105.10] by web14601.mail.yahoo.com via HTTP; Mon, 15 Jul 2002 08:03:55 PDT
Date: Mon, 15 Jul 2002 08:03:55 -0700 (PDT)
From: James Morrison <rocketmail_com@rocketmail.com>
Reply-To: ja2morri@student.math.uwaterloo.ca
Subject: Re: Message passing in user-land
To: rreale@iol.it, bug-hurd@gnu.org
In-Reply-To: <20020715163821.A5411@mail.eq.cr>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

--- rreale@iol.it wrote:
> On Mon, Jul 15, 2002 at 01:13:30PM +0200, Marcus Brinkmann wrote:
> > On Mon, Jul 15, 2002 at 12:21:55PM +0200, rreale@iol.it wrote:
> > > Why we can't implement message passing entirely in user-space rather
> > > than in the kernel?
> > 
> > Imagine you remove all IPC from the kernel.  How do you send a user-space
> > message to another process?  You can't.
>  
> But isn't it possible to build a sort of mechanism based on shared memory,
> thus avoiding the passage across the kernel?
> 
> Roberto
> 

 Who delegates where the shared memory is and who has access to it?

=====
James Morrison
   University of Waterloo
   Computer Science - Digital Hardware
   2A co-op
http://hurd.dyndns.org

Anyone referring to this as 'Open Source' shall be eaten by a GNU


From rreale@iol.it Mon Jul 15 12:07:26 2002
Received: from ppp-111-65.26-151.libero.it ([151.26.65.111] helo=localhost.localdomain)
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17U8Nh-0004cS-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 12:07:26 -0400
Received: from rreale by localhost.localdomain with local (Exim 3.12 #1 (Debian))
	id 17U8Nv-0001nA-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 18:07:39 +0200
Date: Mon, 15 Jul 2002 18:07:39 +0200
To: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
Message-ID: <20020715180739.A6861@mail.eq.cr>
References: <20020715163821.A5411@mail.eq.cr> <20020715150355.85923.qmail@web14601.mail.yahoo.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <20020715150355.85923.qmail@web14601.mail.yahoo.com>; from rocketmail_com@rocketmail.com on Mon, Jul 15, 2002 at 08:03:55AM -0700
From: rreale@iol.it
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

On Mon, Jul 15, 2002 at 08:03:55AM -0700, James Morrison wrote:
>  Who delegates where the shared memory is 

But, I think, whatever component does now memory management.

>  and who has access to it?

Of course, the processes involved in message passing.
I've some vague ideas on how this could be performed, but because of my 
poor English it's not so simple for me to put them down.
Nevertheless, if you think it's not wholly time lost, I'll try to do my best.

Roberto


From rocketmail_com@rocketmail.com Mon Jul 15 13:13:53 2002
Received: from web14607.mail.yahoo.com ([216.136.224.87])
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17U9PY-000728-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 13:13:53 -0400
Message-ID: <20020715171201.11188.qmail@web14607.mail.yahoo.com>
Received: from [65.93.100.191] by web14607.mail.yahoo.com via HTTP; Mon, 15 Jul 2002 10:12:01 PDT
Date: Mon, 15 Jul 2002 10:12:01 -0700 (PDT)
From: James Morrison <rocketmail_com@rocketmail.com>
Reply-To: ja2morri@student.math.uwaterloo.ca
Subject: Re: Message passing in user-land
To: rreale@iol.it, bug-hurd@gnu.org
In-Reply-To: <20020715180739.A6861@mail.eq.cr>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

--- rreale@iol.it wrote:
> 
> On Mon, Jul 15, 2002 at 08:03:55AM -0700, James Morrison wrote:
> >  Who delegates where the shared memory is 
> 
> But, I think, whatever component does now memory management.
> 

 So, you are limited to one memory manager?

> >  and who has access to it?
> 
> Of course, the processes involved in message passing.
> I've some vague ideas on how this could be performed, but because of my 
> poor English it's not so simple for me to put them down.
> Nevertheless, if you think it's not wholly time lost, I'll try to do my best.
> 
> Roberto
> 

 I'm curious to hear your ideas.


=====
James Morrison
   University of Waterloo
   Computer Science - Digital Hardware
   2A co-op
http://hurd.dyndns.org

Anyone referring to this as 'Open Source' shall be eaten by a GNU


From dwalter@syr.edu Mon Jul 15 13:29:12 2002
Received: from syr-24-24-5-111.twcny.rr.com ([24.24.5.111] helo=ryojusen)
	by fencepost.gnu.org with esmtp (Exim 3.35 #1 (Debian))
	id 17U9eq-0007Pl-00
	for <bug-hurd@gnu.org>; Mon, 15 Jul 2002 13:29:12 -0400
Received: from naritai ([192.168.1.4] ident=mail)
	by ryojusen with esmtp (Exim 3.35 #1 (Debian))
	id 17U9es-0008UD-00; Mon, 15 Jul 2002 13:29:14 -0400
Received: from david by naritai with local (Exim 3.35 #1 (Debian))
	id 17U9eh-0001ZH-00; Mon, 15 Jul 2002 13:29:03 -0400
To: rreale@iol.it
Cc: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
References: <20020715163821.A5411@mail.eq.cr>
	<20020715150355.85923.qmail@web14601.mail.yahoo.com>
	<20020715180739.A6861@mail.eq.cr>
From: David Walter<dwalter@syr.edu>
Reply-To: dwalter@syr.edu
Date: Mon, 15 Jul 2002 13:29:03 -0400
In-Reply-To: <20020715180739.A6861@mail.eq.cr> (rreale@iol.it's message of
 "Mon, 15 Jul 2002 18:07:39 +0200")
Message-ID: <87fzykaoio.fsf@syr.edu>
Lines: 61
User-Agent: Gnus/5.090007 (Oort Gnus v0.07) XEmacs/21.4 (Common Lisp,
 i386-debian-linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

rreale@iol.it writes:

> On Mon, Jul 15, 2002 at 08:03:55AM -0700, James Morrison wrote:
>>  Who delegates where the shared memory is
>
> But, I think, whatever component does now memory management.
>
>>  and who has access to it?
>
> Of  course, the processes  involved  in message passing.   I've some
> vague ideas on how this could  be performed, but  because of my poor
> English it's not so simple  for me to  put them down.  Nevertheless,
> if you think it's not wholly time lost, I'll try to do my best.



There is a dependency on someone  arbitrating who has control over the
memory.  Eventually it boils down to one of two models (oversimplified
but hopefully this will help clarify things)

    1.  Some   priviledged user/process   determines  which memory  is
    available for communication.


    2. A free for all, anyone  can arbitrarily choose to negotiate who
    to communicate with, and or which memory to use.


In  traditional  multi{user,tasking}  OS   design  the  kernel  or   a
supervisory program   running with  some  special  priviledge  accepts
requests and grants(or denies) communication channels or allocation of
memory [1].   In  a   microkernel design,  this  may  be  left  to  an
independent  'user  space' process,   but   still  it  runs  with  the
priviledge of making the decision.


In  [2] the process can  access memory as  it wants.  One problem with
[2] is  that, (as in  {IBM-PC/MS}/DOS) a mis-behaving or  evil process
can access memory which is being used by other processes.  In the case
of an errant uninitialized or   faulty pointer, the address can  cause
_bad_(TM) things to occur.

Bad things include overwriting memory in other programs address space,
including  device drivers  and system resources.   Imagine overwriting
the console driver's  interface,   or replacing an  interrupt  vectors
pointer to point to a memory location with your evil routine, then you
can capture keystrokes, or lock the machine.

This type of   problem   (lockup's  or freezing or   misbehaviour   of
programs)  was a  frequent occurrence  with   pc's, up  to the current
implementations of windows (non/NT (aka OS/2) kernel).


HTH.
--
Hope springs eternal!

/^\
\ /     ASCII RIBBON CAMPAIGN
 X        AGAINST HTML MAIL
/ \


From nisse@lysator.liu.se Tue Jul 16 05:35:34 2002
Received: from mail.lysator.liu.se ([130.236.254.3])
	by fencepost.gnu.org with esmtp (Exim 3.35 #1 (Debian))
	id 17UOk2-0002EK-00
	for <bug-hurd@gnu.org>; Tue, 16 Jul 2002 05:35:34 -0400
Received: from fafner.lysator.liu.se (fafner.lysator.liu.se [130.236.254.31])
	by mail.lysator.liu.se (Postfix) with ESMTP
	id CC13E83602B; Tue, 16 Jul 2002 11:35:33 +0200 (MET DST)
Received: (from nisse@localhost)
	by fafner.lysator.liu.se (8.9.3/8.8.7) id LAA21311;
	Tue, 16 Jul 2002 11:35:32 +0200 (MEST)
X-Authentication-Warning: fafner.lysator.liu.se: nisse set sender to nisse@lysator.liu.se using -f
To: rreale@iol.it
Cc: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
References: <20020715122155.A2600@mail.eq.cr>
	<20020715111330.GD432@212.23.136.22> <20020715163821.A5411@mail.eq.cr>
Content-type: text/plain; charset=iso-8859-1
Content-transfer-encoding: 8bit
From: nisse@lysator.liu.se (Niels =?iso-8859-1?q?M=F6ller?=)
Date: 16 Jul 2002 11:35:31 +0200
In-Reply-To: <20020715163821.A5411@mail.eq.cr>
Message-ID: <nn8z4chv6j.fsf@fafner.lysator.liu.se>
Lines: 23
User-Agent: Gnus/5.09 (Gnus v5.9.0) Emacs/21.2
MIME-Version: 1.0
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

rreale@iol.it writes:

> But isn't it possible to build a sort of mechanism based on shared memory,
> thus avoiding the passage across the kernel?

It might be possible to create an ipc mechanism for pure data using
only shared memory, even if it seems somewhat tricky to make it robust.

But IPC is more than just data. For Hurd IPC we also need to be able
to send memory pages (by reference, not copying them), and port
rights. On Mach, all that is in the kernel, on L4, management of port
rights will likely move to user space, but management of the ownership
of individual memory pages is a natural thing for the kernel to do,
and that's the case also for L4.

I suspect that the minimal kernel IPC mechanism that is needed for the
Hurd is something like "give this other process access to this
particular memory page". L4 provides slightly more than that, and
that's probably good for performance, in particular for ipc calls
where the data fit in registers.

Regards,
/Niels


From rreale@iol.it Tue Jul 16 06:26:20 2002
Received: from ppp-105-53.26-151.libero.it ([151.26.53.105] helo=localhost.localdomain)
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17UPX9-0004Ka-00
	for <bug-hurd@gnu.org>; Tue, 16 Jul 2002 06:26:19 -0400
Received: from rreale by localhost.localdomain with local (Exim 3.12 #1 (Debian))
	id 17UPXN-0003kD-00
	for <bug-hurd@gnu.org>; Tue, 16 Jul 2002 12:26:33 +0200
Date: Tue, 16 Jul 2002 12:26:33 +0200
To: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
Message-ID: <20020716122633.A10240@mail.eq.cr>
References: <20020715122155.A2600@mail.eq.cr> <20020715111330.GD432@212.23.136.22> <20020715163821.A5411@mail.eq.cr> <nn8z4chv6j.fsf@fafner.lysator.liu.se>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <nn8z4chv6j.fsf@fafner.lysator.liu.se>; from nisse@lysator.liu.se on Tue, Jul 16, 2002 at 11:35:31AM +0200
From: rreale@iol.it
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

On Tue, Jul 16, 2002 at 11:35:31AM +0200, Niels M?ller wrote:
> rreale@iol.it writes:
> 
> > But isn't it possible to build a sort of mechanism based on shared memory,
> > thus avoiding the passage across the kernel?
> 
> It might be possible to create an ipc mechanism for pure data using
> only shared memory, even if it seems somewhat tricky to make it robust.

But how much performance imprevement would we achieve if we created such
a mechanism, only for pure data?

Roberto


From nisse@lysator.liu.se Tue Jul 16 10:09:19 2002
Received: from mail.lysator.liu.se ([130.236.254.3])
	by fencepost.gnu.org with esmtp (Exim 3.35 #1 (Debian))
	id 17UT0x-0005pS-00
	for <bug-hurd@gnu.org>; Tue, 16 Jul 2002 10:09:19 -0400
Received: from fafner.lysator.liu.se (fafner.lysator.liu.se [130.236.254.31])
	by mail.lysator.liu.se (Postfix) with ESMTP
	id E351383656A; Tue, 16 Jul 2002 16:09:17 +0200 (MET DST)
Received: (from nisse@localhost)
	by fafner.lysator.liu.se (8.9.3/8.8.7) id QAA21417;
	Tue, 16 Jul 2002 16:09:17 +0200 (MEST)
X-Authentication-Warning: fafner.lysator.liu.se: nisse set sender to nisse@lysator.liu.se using -f
To: rreale@iol.it
Cc: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
References: <20020715122155.A2600@mail.eq.cr>
	<20020715111330.GD432@212.23.136.22> <20020715163821.A5411@mail.eq.cr>
	<nn8z4chv6j.fsf@fafner.lysator.liu.se>
	<20020716122633.A10240@mail.eq.cr>
Content-type: text/plain; charset=iso-8859-1
Content-transfer-encoding: 8bit
From: nisse@lysator.liu.se (Niels =?iso-8859-1?q?M=F6ller?=)
Date: 16 Jul 2002 16:09:16 +0200
In-Reply-To: <20020716122633.A10240@mail.eq.cr>
Message-ID: <nnit3fhiib.fsf@fafner.lysator.liu.se>
Lines: 17
User-Agent: Gnus/5.09 (Gnus v5.9.0) Emacs/21.2
MIME-Version: 1.0
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

rreale@iol.it writes:

> But how much performance imprevement would we achieve if we created such
> a mechanism, only for pure data?

The fastest way to do it that I can imagine, for the simplest case of
mutually trusting processes, is to have a (possibly) short message
queue, protected by a mutex and some condition variables, all in th
eshared memory page. It's not obvious to me if that will be slower or
faster than L4 ipc that can pass the data in registers.

Furthermore, I have never implemented mutexes and condition variables,
but I wouldn't be surprised if some syscall is needed for conditions
to propagate between threads or processes.

Regards,
/Niels


From rreale@iol.it Tue Jul 16 12:17:23 2002
Received: from ppp-117-61.26-151.libero.it ([151.26.61.117] helo=localhost.localdomain)
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17UV0s-0003Pu-00
	for <bug-hurd@gnu.org>; Tue, 16 Jul 2002 12:17:23 -0400
Received: from rreale by localhost.localdomain with local (Exim 3.12 #1 (Debian))
	id 17UV17-0000aw-00
	for <bug-hurd@gnu.org>; Tue, 16 Jul 2002 18:17:37 +0200
Date: Tue, 16 Jul 2002 18:17:37 +0200
To: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
Message-ID: <20020716181737.A2261@mail.eq.cr>
References: <20020715122155.A2600@mail.eq.cr> <20020715111330.GD432@212.23.136.22> <20020715163821.A5411@mail.eq.cr> <nn8z4chv6j.fsf@fafner.lysator.liu.se> <20020716122633.A10240@mail.eq.cr> <nnit3fhiib.fsf@fafner.lysator.liu.se>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <nnit3fhiib.fsf@fafner.lysator.liu.se>; from nisse@lysator.liu.se on Tue, Jul 16, 2002 at 04:09:16PM +0200
From: rreale@iol.it
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

On Tue, Jul 16, 2002 at 04:09:16PM +0200, Niels M?ller wrote:
> rreale@iol.it writes:
> 
> > But how much performance imprevement would we achieve if we created such
> > a mechanism, only for pure data?
> 
> The fastest way to do it that I can imagine, for the simplest case of
> mutually trusting processes, is to have a (possibly) short message
> queue, protected by a mutex and some condition variables, all in th
> eshared memory page. It's not obvious to me if that will be slower or
> faster than L4 ipc that can pass the data in registers.
> 
> Furthermore, I have never implemented mutexes and condition variables,
> but I wouldn't be surprised if some syscall is needed for conditions
> to propagate between threads or processes.
> 
> Regards,
> /Niels

I'll try to roughly explain my idea, which doesn't apply
to every IPC type, but only to a small subset thereof. This 
subset includes the message passing between a client/server
pair and among the servers themselves, with the additional
constraint of very small pieces of data being passed at once.
In this scenario we could use one (or even more) system-wide
data structure, such as a queue, to manage all the messages.
This queue would be made up of several smaller queues, each
one pertaining to a single process (or group of processes)
and used by this process to talk with one or more servers.
Each small queue would live in one page (or more, but few, pages)
or memory shared with the servers. One possible (simplified)
arrangement of the memory would look like this:

  process #1        process #2        process #3  
| address   |     | address   |     | address   | 
| space     |     | space     |     | space     |
|-----------|     |-----------|     |-----------|
| text etc. |     | text etc. |     | text etc. |
|           |     |           |     |           |
|-----------|     |-----------|     |-----------|
|   heap    |     |   heap    |     |   heap    |
|           |     |           |     |           |
|-----------|     |-----------|     |-----------|
|           |     |           |     |           |
|-----------|     |-----------|     |-----------|
| IPC queue |-+   | IPC queue |-+   | IPC queue |-+
|-----------| |   |-----------| |   |-----------| |
|           | |   |           | |   |           | |
|-----------| |   |-----------| |   |-----------| |
|   stack   | |   |   stack   | |   |   stack   | |
|-----------| |   |-----------| |   |-----------| |
|           | |   |           | |   |           | |
              |                 |                 |
              |                 |                 |
              |                 |                 |
              +-----------+     |     +-----------+
                          |     |     |
                          |     |     |
---------+--------+-----+----+-----+-----+-----+----+---------+--
server #1|        |  h  |q   |q    |q    |q    |    |         |
address  |  text  |  e  |u   |u    |u    |u    |    |  stack  |
space    |  etc.  |  a  |e 1 |e 2  |e 3  |e n  |    |         |
         |        |  p  |u   |u    |u    |u    |    |         |
         |        |     |e   |e    |e    |e    |    |         |
---------+--------+-----+----+-----+-----+-----+----+---------+--
                          |     |     |
                          |     |     |
                          |     |     |
---------+--------+-----+----+-----+-----+-----+----+---------+--
server #2|        |  h  |q   |q    |q    |q    |    |         |
address  |  text  |  e  |u   |u    |u    |u    |    |  stack  |
space    |  etc.  |  a  |e 1 |e 2  |e 3  |e n  |    |         |
         |        |  p  |u   |u    |u    |u    |    |         |
         |        |     |e   |e    |e    |e    |    |         |
---------+--------+-----+----+-----+-----+-----+----+---------+--

Sorry for the lack of clearness, but my idea - and for that matter
my English - are alas at early alpha stage. I'd like, however,
to hear your criticism and hopefully your suggestions.

Thanks,
Roberto


From rocketmail_com@rocketmail.com Tue Jul 16 15:44:08 2002
Received: from web14607.mail.yahoo.com ([216.136.224.87])
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17UYEy-00049P-00
	for <bug-hurd@gnu.org>; Tue, 16 Jul 2002 15:44:08 -0400
Message-ID: <20020716194407.23846.qmail@web14607.mail.yahoo.com>
Received: from [129.97.105.10] by web14607.mail.yahoo.com via HTTP; Tue, 16 Jul 2002 12:44:07 PDT
Date: Tue, 16 Jul 2002 12:44:07 -0700 (PDT)
From: James Morrison <rocketmail_com@rocketmail.com>
Reply-To: ja2morri@student.math.uwaterloo.ca
Subject: Re: Message passing in user-land
To: rreale@iol.it, bug-hurd@gnu.org
In-Reply-To: <20020716181737.A2261@mail.eq.cr>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>


 Ok, so it looks like every process maintains it's own set of queues.  So
I am a server process and I setup 3 queues for clients to write in.  Now,
how do the clients know where to write the data so I can find it?  Previously,
you said it would be the memory managers job.  So, I write to some pre-defined
queue of the memory manager, to say people can write msg's to me.  Now, any
process can ask the memory manager where to put msg's to me.  If this is what
you are thinking, it sort of makes sense.  But assumming we have a process/task
boundary where each process has it's own virtual address space how can it break
this barrier without the kernel's help?  I can sort of wrap my brain around
this,
but I keep comming back to crazy libc hacks.

=====
James Morrison
   University of Waterloo
   Computer Science - Digital Hardware
   2A co-op
http://hurd.dyndns.org

Anyone referring to this as 'Open Source' shall be eaten by a GNU


From nisse@lysator.liu.se Tue Jul 16 16:58:43 2002
Received: from mail.lysator.liu.se ([130.236.254.3])
	by fencepost.gnu.org with esmtp (Exim 3.35 #1 (Debian))
	id 17UZP9-0008JS-00
	for <bug-hurd@gnu.org>; Tue, 16 Jul 2002 16:58:43 -0400
Received: from fafner.lysator.liu.se (fafner.lysator.liu.se [130.236.254.31])
	by mail.lysator.liu.se (Postfix) with ESMTP
	id EE49C8301CC; Tue, 16 Jul 2002 22:58:41 +0200 (MET DST)
Received: (from nisse@localhost)
	by fafner.lysator.liu.se (8.9.3/8.8.7) id WAA28477;
	Tue, 16 Jul 2002 22:58:41 +0200 (MEST)
X-Authentication-Warning: fafner.lysator.liu.se: nisse set sender to nisse@lysator.liu.se using -f
To: rreale@iol.it
Cc: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
References: <20020715122155.A2600@mail.eq.cr>
	<20020715111330.GD432@212.23.136.22> <20020715163821.A5411@mail.eq.cr>
	<nn8z4chv6j.fsf@fafner.lysator.liu.se>
	<20020716122633.A10240@mail.eq.cr>
	<nnit3fhiib.fsf@fafner.lysator.liu.se>
	<20020716181737.A2261@mail.eq.cr>
Content-type: text/plain; charset=iso-8859-1
Content-transfer-encoding: 8bit
From: nisse@lysator.liu.se (Niels =?iso-8859-1?q?M=F6ller?=)
Date: 16 Jul 2002 22:58:40 +0200
In-Reply-To: <20020716181737.A2261@mail.eq.cr>
Message-ID: <nn65zfgzjz.fsf@fafner.lysator.liu.se>
Lines: 31
User-Agent: Gnus/5.09 (Gnus v5.9.0) Emacs/21.2
MIME-Version: 1.0
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

rreale@iol.it writes:

> I'll try to roughly explain my idea, which doesn't apply
> to every IPC type, but only to a small subset thereof. This 
> subset includes the message passing between a client/server
> pair and among the servers themselves, with the additional
> constraint of very small pieces of data being passed at once.

I think the problem is that you have some memory shared between
threads (of different processes). For now, I'm assuming that this
sharing is setup in advance by some memory manager or kernel
mechanism.

But as several threads need to access the memory in parallell, you
need to use some syncronization primitives (mutexes, condition
variables, see any book on programming with threads) to coordinate
access. And as far as I can see, that's hard to do without kernel help.

One basic problem is: I'm an idle server process, and I want to wait
for a client to send me a message. How do I do that? There are two
ways: Either I poll the structures regularly, or I need some basic ipc
primitive, typically a wakeup call to a thread in a different process.
In the former case, I'll either waste cpu time or get slow ipc
response time, and for the latter case, it seems hard to do it
completely in user space.

So to give a good answer I think one first need a thourough
understanding of how how threading primitives like mutexes and
condition variables are implemented, and that's not really my area.

/Niels


From rreale@iol.it Wed Jul 17 07:30:17 2002
Received: from ppp-248-61.26-151.libero.it ([151.26.61.248] helo=localhost.localdomain)
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17Un0a-0007tq-00
	for <bug-hurd@gnu.org>; Wed, 17 Jul 2002 07:30:17 -0400
Received: from rreale by localhost.localdomain with local (Exim 3.12 #1 (Debian))
	id 17Un0p-0000RE-00
	for <bug-hurd@gnu.org>; Wed, 17 Jul 2002 13:30:31 +0200
Date: Wed, 17 Jul 2002 13:30:31 +0200
To: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
Message-ID: <20020717133031.A931@mail.eq.cr>
References: <20020716181737.A2261@mail.eq.cr> <20020716194407.23846.qmail@web14607.mail.yahoo.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <20020716194407.23846.qmail@web14607.mail.yahoo.com>; from rocketmail_com@rocketmail.com on Tue, Jul 16, 2002 at 12:44:07PM -0700
From: rreale@iol.it
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

On Tue, Jul 16, 2002 at 12:44:07PM -0700, James Morrison wrote:
> 
> 
>  Ok, so it looks like every process maintains it's own set of queues.  So
> I am a server process and I setup 3 queues for clients to write in.  Now,
> how do the clients know where to write the data so I can find it?  Previously,
> you said it would be the memory managers job.  So, I write to some pre-defined
> queue of the memory manager, to say people can write msg's to me.  Now, any
> process can ask the memory manager where to put msg's to me.  If this is what
> you are thinking, it sort of makes sense.  But assumming we have a process/task
> boundary where each process has it's own virtual address space how can it break
> this barrier without the kernel's help?  I can sort of wrap my brain around
> this,
> but I keep comming back to crazy libc hacks.

You are right, but we need the kernel's help only once during the whole
process' lifetime, i.e. when the new process is created and the shared 
memory area chosen by the memory manager.  During the process creation,
the address of this area could be written in some well-known location
of the process' address space.  This way there's no need for the process
itself to query the memory manager each time it wants to send a message.

Roberto


From rreale@iol.it Wed Jul 17 08:53:13 2002
Received: from ppp-29-66.26-151.libero.it ([151.26.66.29] helo=localhost.localdomain)
	by fencepost.gnu.org with smtp (Exim 3.35 #1 (Debian))
	id 17UoIq-0003Cv-00
	for <bug-hurd@gnu.org>; Wed, 17 Jul 2002 08:53:12 -0400
Received: from rreale by localhost.localdomain with local (Exim 3.12 #1 (Debian))
	id 17UoJ5-0000oG-00
	for <bug-hurd@gnu.org>; Wed, 17 Jul 2002 14:53:27 +0200
Date: Wed, 17 Jul 2002 14:53:27 +0200
To: bug-hurd@gnu.org
Subject: Re: Message passing in user-land
Message-ID: <20020717145327.B931@mail.eq.cr>
References: <20020715122155.A2600@mail.eq.cr> <20020715111330.GD432@212.23.136.22> <20020715163821.A5411@mail.eq.cr> <nn8z4chv6j.fsf@fafner.lysator.liu.se> <20020716122633.A10240@mail.eq.cr> <nnit3fhiib.fsf@fafner.lysator.liu.se> <20020716181737.A2261@mail.eq.cr> <nn65zfgzjz.fsf@fafner.lysator.liu.se>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <nn65zfgzjz.fsf@fafner.lysator.liu.se>; from nisse@lysator.liu.se on Tue, Jul 16, 2002 at 10:58:40PM +0200
From: rreale@iol.it
Sender: bug-hurd-admin@gnu.org
Errors-To: bug-hurd-admin@gnu.org
X-BeenThere: bug-hurd@gnu.org
X-Mailman-Version: 2.0.11
Precedence: bulk
List-Help: <mailto:bug-hurd-request@gnu.org?subject=help>
List-Post: <mailto:bug-hurd@gnu.org>
List-Subscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=subscribe>
List-Id: Bug reports for the GNU Hurd <bug-hurd.gnu.org>
List-Unsubscribe: <http://mail.gnu.org/mailman/listinfo/bug-hurd>,
	<mailto:bug-hurd-request@gnu.org?subject=unsubscribe>
List-Archive: <http://mail.gnu.org/pipermail/bug-hurd/>

On Tue, Jul 16, 2002 at 10:58:40PM +0200, Niels M?ller wrote:
> rreale@iol.it writes:
> 
> > I'll try to roughly explain my idea, which doesn't apply
> > to every IPC type, but only to a small subset thereof. This 
> > subset includes the message passing between a client/server
> > pair and among the servers themselves, with the additional
> > constraint of very small pieces of data being passed at once.
> 
> I think the problem is that you have some memory shared between
> threads (of different processes). For now, I'm assuming that this
> sharing is setup in advance by some memory manager or kernel
> mechanism.
> 
> But as several threads need to access the memory in parallell, you
> need to use some syncronization primitives (mutexes, condition
> variables, see any book on programming with threads) to coordinate
> access. And as far as I can see, that's hard to do without kernel help.

Firstly thank you for your deep analysis. 
You've hit the very trouble of the whole matter. I think one approach 
to the problem might be the following:

a) when we refer to a server we are talking about core servers like
   exec, init, and so on, which should be reasonably trustworthy;

b) we cannot of course rely upon any assumption about how trustworthy
   a client process is;

c) we should design the system-wide queue in such a way that each subqueue
   acts as a sort of ``water-tight compartement'';

d) mutexes might be implemented with flags in the data structure itself,
   thus providing a form of ``non-mandatory locking'' on a per-subqueue
   basis;

e) clearly we suppose that both the server and the client (or clients)
   will honour the locking policy; but if the client doesn't, only its
   own subqueue gets corrupted, and the server might detect this by
   some simple sanity checking on the data structure and cause the 
   client's termination.

f) for critical operations we may still use the traditional IPC method.

> One basic problem is: I'm an idle server process, and I want to wait
> for a client to send me a message. How do I do that? There are two
> ways: Either I poll the structures regularly, or I need some basic ipc
> primitive, typically a wakeup call to a thread in a different process.
> In the former case, I'll either waste cpu time or get slow ipc
> response time, and for the latter case, it seems hard to do it
> completely in user space.

Clearly an IPC mechanism that doesn't make use of the kernel might 
become useful only in non-real-time applications, because it provides 
no form of asynchronous I/O on the communication channels.  I would
suggest that the system should switch between the traditional and the
``new'' form of IPC according to the workload and the needs.

> So to give a good answer I think one first need a thourough
> understanding of how how threading primitives like mutexes and
> condition variables are implemented, and that's not really my area.

Not mine either unfortunately...

Roberto
